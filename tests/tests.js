// Generated by CoffeeScript 1.3.3
(function() {
  var $FIXTURE, $legend, DATA, FIXTURE;

  FIXTURE = document.getElementById('qunit-fixture');

  DATA = [[]];

  $FIXTURE = $(FIXTURE);

  module("D3Chart");

  test("SVG element created", function() {
    var testChart;
    testChart = new D3Chart(FIXTURE, DATA);
    return ok($FIXTURE.find('svg').length, "Fixture element should contain a SVG element.");
  });

  test("Variable has basic properties", function() {
    var testChart;
    testChart = new D3Chart(FIXTURE, DATA);
    ok(testChart.svg, ".svg");
    return ok(testChart.plot, ".plot");
  });

  test("Default options loaded when none provided", function() {
    var testChart;
    testChart = new D3Chart(FIXTURE, DATA);
    return ok(testChart.option('margin'));
  });

  test("Provided options override defaults", function() {
    var options, testChart;
    options = {
      margin: {
        top: 0,
        left: 0
      }
    };
    testChart = new D3Chart(FIXTURE, DATA, options);
    equal(testChart.option('margin').top, options.margin.top);
    return equal(testChart.option('margin').bottom, 30, "Assuming the default is 30,    it's a private variable so we can't automatically pull it out to compare.");
  });

  test("postRender is called", function() {
    var block, options;
    options = {
      postRender: function() {
        throw "poop";
      }
    };
    block = function() {
      return new D3Chart(FIXTURE, DATA, options);
    };
    return throws(block, "poop");
  });

  module("D3BarChart");

  test("plot has same number of layers as number of series", function() {
    var testChart;
    testChart = new D3BarChart(FIXTURE, [[], [], [], [], []]);
    return equal(testChart.plot.selectAll('g.layer')[0].length, 5);
  });

  test("plot y extents go from 0 to max value of y", function() {
    var data, testChart;
    data = [
      [
        {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 2000
        }
      ], [
        {
          x: 0,
          y: 100
        }, {
          x: 1,
          y: 20000
        }
      ]
    ];
    testChart = new D3BarChart(FIXTURE, data);
    equal(testChart.yScale.domain()[0], 0);
    return equal(testChart.yScale.domain()[1], 20000);
  });

  test("plot y extents are found and correct with a custom data accessor", function() {
    var data, options, testChart;
    data = [
      {
        values: [
          {
            x: 0,
            y: 1
          }, {
            x: 1,
            y: 2000
          }
        ]
      }, {
        values: [
          {
            x: 0,
            y: 100
          }, {
            x: 1,
            y: 20000
          }
        ]
      }
    ];
    options = {
      accessors: {
        bars: function(d) {
          return d.values;
        }
      }
    };
    testChart = new D3BarChart(FIXTURE, data, options);
    equal(testChart.yScale.domain()[0], 0);
    return equal(testChart.yScale.domain()[1], 20000);
  });

  test("plot y min can be set based on options.yAxis.min", function() {
    var data, options, testChart;
    data = [
      [
        {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 20
        }
      ]
    ];
    options = {
      yAxis: {
        min: 10
      }
    };
    testChart = new D3BarChart(FIXTURE, data, options);
    equal(testChart.yScale.domain()[0], options.yAxis.min);
    return equal(testChart.yScale.domain()[1], 20);
  });

  test("plot y max can be set based on options.yAxis.max", function() {
    var data, options, testChart;
    data = [
      [
        {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 20
        }
      ]
    ];
    options = {
      yAxis: {
        max: 100
      }
    };
    testChart = new D3BarChart(FIXTURE, data, options);
    equal(testChart.yScale.domain()[0], 0);
    return equal(testChart.yScale.domain()[1], options.yAxis.max);
  });

  test("plot y max can be set based on options.yAxis.max even if it is smaller than the max", function() {
    var data, options, testChart;
    data = [
      [
        {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 20000
        }
      ]
    ];
    options = {
      yAxis: {
        max: 100
      }
    };
    testChart = new D3BarChart(FIXTURE, data, options);
    equal(testChart.yScale.domain()[0], 0);
    return equal(testChart.yScale.domain()[1], options.yAxis.max);
  });

  test("fill color can be obtained via an accesor", function() {
    var data, options, testChart;
    data = [
      {
        values: [
          {
            x: 0,
            y: 1
          }, {
            x: 1,
            y: 2000
          }
        ],
        name: "foo"
      }, {
        values: [
          {
            x: 0,
            y: 100
          }, {
            x: 1,
            y: 20000
          }
        ],
        name: "bar"
      }
    ];
    options = {
      color: {
        foo: "#ff0000",
        bar: "#00ff00"
      },
      accessors: {
        bars: function(d) {
          return d.values;
        },
        colors: function(d) {
          return d.name;
        }
      }
    };
    testChart = new D3BarChart(FIXTURE, data, options);
    return equal(testChart.plot.select('g.layer').style('fill'), options.color[data[0].name]);
  });

  $legend = null;

  DATA = [[]];

  module("Legend Tests", {
    setup: function() {
      return $legend = $("<div/>").appendTo($FIXTURE);
    }
  });

  test("legend made", function() {
    var options, testChart;
    options = {
      legend: {
        enabled: true,
        elem: $legend
      }
    };
    testChart = new D3BarChart(FIXTURE, DATA, options);
    return ok(testChart.legend, "Legend attribute is truthy");
  });

  test("legend titleAccessor is called", function() {
    var block, options;
    options = {
      legend: {
        enabled: true,
        elem: $legend,
        titleAccessor: function() {
          throw "poop";
        }
      }
    };
    block = function() {
      return new D3BarChart(FIXTURE, DATA, options);
    };
    return throws(block, "poop");
  });

  test("legend postRender is called", function() {
    var block, options;
    options = {
      legend: {
        enabled: true,
        elem: $legend,
        postRender: function() {
          throw "poop";
        }
      }
    };
    block = function() {
      return new D3BarChart(FIXTURE, DATA, options);
    };
    return throws(block, "poop");
  });

  test("legend order is normal", function() {
    var options, testChart;
    options = {
      legend: {
        enabled: true,
        elem: $legend
      }
    };
    testChart = new D3BarChart(FIXTURE, [[], [], []], options);
    return equal(testChart.$legend.find('.legend-value').text(), "012");
  });

  test("legend color order is normal", function() {
    var actually_is, options, should_be, testChart;
    options = {
      legend: {
        enabled: true,
        elem: $legend
      }
    };
    testChart = new D3BarChart(FIXTURE, [[], [], []], options);
    should_be = testChart.option('color')(0);
    actually_is = testChart.$legend.find('.legend-key:first').css('color');
    return equal(d3.rgb(should_be).toString(), d3.rgb(actually_is).toString());
  });

  test("legend order can be reversed", function() {
    var options, testChart;
    options = {
      legend: {
        enabled: true,
        reversed: true,
        elem: $legend
      }
    };
    testChart = new D3BarChart(FIXTURE, [[], [], []], options);
    return equal(testChart.$legend.find('.legend-value').text(), "210");
  });

  test("legend color order is reversed when order is reversed", function() {
    var actually_is, options, should_be, testChart;
    options = {
      legend: {
        enabled: true,
        reversed: true,
        elem: $legend
      }
    };
    testChart = new D3BarChart(FIXTURE, [[], [], []], options);
    should_be = testChart.option('color')(2);
    actually_is = testChart.$legend.find('.legend-key:first').css('color');
    return equal(d3.rgb(should_be).toString(), d3.rgb(actually_is).toString());
  });

}).call(this);
